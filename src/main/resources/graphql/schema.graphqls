type Query {
    pets: [Pet]
    getMyInfo: User
    getUser(username: String!) : User
    getMyPost: [Post]
}

type User {
    UUID: ID!
    username: String
    firstName: String
    lastName: String
    email: String
    registrationDate: Int
    avatarUrl: String
}

type Post {
    UUID: ID!
    fullUserName: String
    content: String
    photoUrl: [String]
}

type Mutation {
    loginUser(input: LoginUserInput!) : LoginUserPayload
    verifyOtp(input: VerifyOtpInput!) : VerifyOtpPayload
    registrationUser(input: RegistrationUserInput!) : RegistrationUserPayload
    createPost(input: CreatePostInput!) : CreatePostPayload
}

type CreatePostPayload {
    id: ID!,
    post: Post
}

input CreatePostInput {
    content: String,
    photoUrls: [String]
}

type RegistrationUserPayload {
    UUID: ID!,
    credentials: VerifyOtpPayload
}

input RegistrationUserInput {
    usernameOrEmail: String!
    password: String!
}

type VerifyOtpPayload {
    type: String
    accessToken: String
    signedDate: Int
    expiredDate: Int
}

input VerifyOtpInput {
    userOrEmail: String
    otp: String!
}

type LoginUserPayload {
    sentTo: String!
    otp: String
}

input LoginUserInput {
    userOrEmail: String!
    password: String!
}

type Pet {
    name: String
    color: String
}
