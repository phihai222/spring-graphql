type Query {
#    User
    getMyInfo: User
    getUserByNameOrEmail(usernameOrEmail: String!) : User

#    Post
    getMyPosts(first: Int!,after: String): PostConnection
    getPostByUsername(username: String!,first: Int!,after: String): PostConnection
    getCommentByPostId(postId: String!, first: Int!,after: String): CommentConnection
    getPostTimeline(first: Int!,after: String) : PostConnection

#    Friend
    getMyFriendRequest(first: Int!,after: String): FriendRequestConnection
    getMyFriendList(first: Int!, after: String) : FriendConnection #TODO implement

#    Other
    search(word: String!): SearchResultPayload #TODO implement
}

type Mutation {
#    Authentication
    loginUser(input: LoginUserInput!) : LoginUserPayload
    verifyOtp(input: VerifyOtpInput!) : VerifyOtpPayload
    registrationUser(input: RegistrationUserInput!) : RegistrationUserPayload

#    Post
    createPost(input: CreatePostInput!) : CreatePostPayload
    likePost(input: LikePostInput!) : LikePostPayload
    commentPost(input: CommentPostInput!) : Comment
    deletePost(input: String!) : CommonPayload

#    Friend
    requestOrAcceptFriend(input: AddFriendInput!) : CommonPayload
    ignoreFriendRequest(userId: String!): CommonPayload
    unfriend(userId: String!): CommonPayload

#    User
    updateUserInfo(input: UpdateUserInput!): User
    setTwoMF: SetTwoMFPayload
    verifyTwoMFOtp(input: String! @Size(min: 6, max: 6)): CommonPayload
}


directive @Size(min : Int = 0, max : Int = 2147483647, message : String = "graphql.validation.Size.message")
on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Pattern(regexp : String! =".*", message : String = "graphql.validation.Pattern.message")
on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NotEmpty(message : String = "graphql.validation.NotEmpty.message")
on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION