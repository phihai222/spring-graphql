type Query {
    getMyInfo: User
    getUser(username: String!) : User
    getMyPosts: [Post] #Todo implement Relays
    getCommentByPostId(postId: ID!): [Comment] #Todo implement Relays
}

type Comment {
    id: ID!,
    userId: ID,
    content: String
}

type User {
    id: ID!
    username: String
    firstName: String
    lastName: String
    email: String
    registrationDate: Int
    avatarUrl: String
}

type Post {
    id: ID!
    fullUserName: String
    content: String
    photoUrl: [String]
    comments: [Comment]
}

type Mutation {
    loginUser(input: LoginUserInput!) : LoginUserPayload
    verifyOtp(input: VerifyOtpInput!) : VerifyOtpPayload
    registrationUser(input: RegistrationUserInput!) : RegistrationUserPayload
    createPost(input: CreatePostInput!) : CreatePostPayload
    likePost(input: LikePostInput!) : LikePostPayload
    commentPost(input: CommentPostInput!) : CommentPostPayload
    addFriend(input: addFriendInput!) : addFriendPayload
    acceptOrRejectFriend(input: acceptOrRejectFriendInput!): acceptOrRejectFriendPayload
}

type acceptOrRejectFriendPayload {
    status: Status,
}

input acceptOrRejectFriendInput {
    id: ID!,
    status: Boolean
}

type addFriendPayload {
    id: ID!
}

input addFriendInput {
    userId: ID!,
    message: String
}

type CommentPostPayload {
    id: ID!
}

input CommentPostInput {
    postId: ID!,
    content: String!
}

type LikePostPayload {
    id: ID!
    liked: Boolean
}

input LikePostInput {
    postId: ID!
}

type CreatePostPayload {
    id: ID!,
    post: Post,
}

input CreatePostInput {
    content: String,
    photoUrls: [String]
}

type RegistrationUserPayload {
    id: ID!,
    credentials: VerifyOtpPayload
}

input RegistrationUserInput {
    usernameOrEmail: String!
    password: String!
}

type VerifyOtpPayload {
    type: String
    accessToken: String
    signedDate: Float
    expiredDate: Float
}

input VerifyOtpInput {
    userOrEmail: String
    otp: String!
}

type LoginUserPayload {
    sentTo: String!
    otp: String
}

input LoginUserInput {
    userOrEmail: String!
    password: String!
}

enum Status {
    COMPLETED
}
