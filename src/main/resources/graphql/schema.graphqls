type Query {
    getMyInfo: User
    getUserByNameOrEmail(usernameOrEmail: String!) : User
    getMyPosts(first: Int!,after: String): PostConnection
    getCommentByPostId(postId: String!, first: Int!,after: String): CommentConnection
    search(word: String!): SearchResultPayload
}

type Mutation {
    loginUser(input: LoginUserInput!) : LoginUserPayload
    verifyOtp(input: VerifyOtpInput!) : VerifyOtpPayload
    registrationUser(input: RegistrationUserInput!) : RegistrationUserPayload
    createPost(input: CreatePostInput!) : CreatePostPayload
    likePost(input: LikePostInput!) : LikePostPayload
    commentPost(input: CommentPostInput!) : Comment
    addFriend(input: AddFriendInput!) : AddFriendPayload
    acceptOrRejectFriend(input: AcceptOrRejectFriendInput!): AcceptOrRejectFriendPayload
    updateUserInfo(input: UpdateUserInput!): User
    setTwoMF: SetTwoMFPayload
    verifyTwoMFOtp(input: String! @Size(min: 6, max: 6)): CommonPayload
}


directive @Size(min : Int = 0, max : Int = 2147483647, message : String = "graphql.validation.Size.message")
on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Pattern(regexp : String! =".*", message : String = "graphql.validation.Pattern.message")
on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @NotEmpty(message : String = "graphql.validation.NotEmpty.message")
on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION