type Query {
    getMyInfo: User
    getUser(username: String!) : User
    getMyPosts: [Post] #Todo implement Relays
    getCommentByPostId(postId: ID!): [Comment] #Todo implement Relays
}

type Mutation {
    loginUser(input: LoginUserInput!) : LoginUserPayload
    verifyOtp(input: VerifyOtpInput!) : VerifyOtpPayload
    registrationUser(input: RegistrationUserInput!) : RegistrationUserPayload
    createPost(input: CreatePostInput!) : CreatePostPayload
    likePost(input: LikePostInput!) : LikePostPayload
    commentPost(input: CommentPostInput!) : Comment
    addFriend(input: AddFriendInput!) : AddFriendPayload
    acceptOrRejectFriend(input: AcceptOrRejectFriendInput!): AcceptOrRejectFriendPayload
}

#Model
type Comment {
    id: ID!,
    userId: ID!,
    content: String!,
    postId: String!
}

type User {
    id: ID!
    username: String
    firstName: String
    lastName: String
    email: String
    registrationDate: Int
    avatarUrl: String
}

type Post {
    id: ID!
    fullUserName: String
    content: String
    photoUrl: [String]
    comments: [Comment]
}

enum Status {
    COMPLETED
}

#Friend
type AcceptOrRejectFriendPayload {
    requestId: ID!
    status: Status,
}

input AcceptOrRejectFriendInput {
    requestId: ID!,
    status: Boolean!
}

type AddFriendPayload {
    requestId: ID!,
    friendId: ID!,
    message: String
}

input AddFriendInput {
    userId: ID!,
    message: String @Size(min: 3, max: 255)
}

#Comment
input CommentPostInput {
    postId: ID!,
    content: String! @Size(min: 3, max: 255)
}

#Like
type LikePostPayload {
    id: ID!
    liked: Boolean
}

input LikePostInput {
    postId: ID!
}

#Post
type CreatePostPayload {
    id: ID!,
    post: Post,
}

input CreatePostInput {
    content: String @Size(min: 3, max: 255)
    photoUrls: [String]
}

#Auth
type RegistrationUserPayload {
    id: ID!,
    credentials: VerifyOtpPayload
}

input RegistrationUserInput {
    usernameOrEmail: String! @Pattern(regexp: "\\S*", message: "White space is not accept") @Size(min:5, max:50)
    password: String! @Pattern(regexp: "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,50}$", message: "Has range 8-50 characters, At least 1 uppercase, 1 lowercase, 1 digit, 1 special character English letter")
}

type VerifyOtpPayload {
    type: String
    accessToken: String
    signedDate: Float
    expiredDate: Float
}

input VerifyOtpInput {
    userOrEmail: String @Pattern(regexp: "\\S*", message: "White space is not accept") @Size(min:5, max:15)
    otp: String! @Size(min: 6, max: 6)
}

type LoginUserPayload {
    sentTo: String!
    otp: String
}

input LoginUserInput {
    userOrEmail: String! @Pattern(regexp: "\\S*", message: "White space is not accept") @Size(min:5, max:15)
    password: String! @Size(min: 8, max: 50)
}

directive @Size(min : Int = 0, max : Int = 2147483647, message : String = "graphql.validation.Size.message")
on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @Pattern(regexp : String! =".*", message : String = "graphql.validation.Pattern.message")
on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
